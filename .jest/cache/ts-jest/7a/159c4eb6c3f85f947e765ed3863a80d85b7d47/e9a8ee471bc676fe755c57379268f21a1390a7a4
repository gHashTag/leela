[["/Users/playra/leela/src/components/AppContainer/AppContainer.test.tsx",{"fileContent":"import React from 'react'\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { AppContainer } from './'\nimport { Text } from 'react-native'\n\ndescribe('<AppContainer />', () => {\n  it('renders correctly', () => {\n    const { getByText } = render(\n      <AppContainer title=\"Test Title\">\n        <Text>Child Component</Text>\n      </AppContainer>\n    )\n\n    expect(getByText('Test Title')).toBeTruthy()\n    expect(getByText('Child Component')).toBeTruthy()\n  })\n\n  it('calls onPress when header is clicked', () => {\n    const onPressMock = jest.fn()\n\n    const { getByTestId } = render(\n      <AppContainer title=\"Test Title\" onPress={onPressMock}>\n        <Text>Child Component</Text>\n      </AppContainer>\n    )\n\n    fireEvent.press(getByTestId('header'))\n    expect(onPressMock).toHaveBeenCalled()\n  })\n\n  it('does not render header if header prop is false', () => {\n    const { queryByText } = render(\n      <AppContainer title=\"Test Title\" header={false}>\n        <Text>Child Component</Text>\n      </AppContainer>\n    )\n\n    expect(queryByText('Test Title')).toBeNull()\n  })\n})\n","resolvedModuleNames":["/Users/playra/leela/src/components/AppContainer/index.tsx","/Users/playra/leela/src/components/Background/index.tsx","/Users/playra/leela/src/components/Header/index.tsx"]}],["/Users/playra/leela/src/components/AppContainer/index.tsx",{"fileContent":"import React from 'react'\nimport { StyleSheet, View } from 'react-native'\n\nimport { Background } from '../Background'\nimport { Header } from '../Header'\n\ninterface AppContainerT {\n  iconLeft?: string | null\n  colorLeft?: string\n  onPress?: () => void\n  onPressRight?: () => void\n  iconRight?: string | null\n  children: React.ReactNode\n  message?: string\n  title?: string\n  displayStatus?: boolean\n  enableBackgroundBottomInsets?: boolean\n  enableBackgroundTopInsets?: boolean\n  header?: boolean\n  iconLeftOpacity?: number\n  textAlign?: 'center' | 'auto' | 'left' | 'right' | 'justify'\n  status?: 'bg' | 'clean' | '1x1'\n  hidestar?: boolean\n}\n\nexport function AppContainer({\n  iconLeft = null,\n  onPress,\n  onPressRight,\n  header = true,\n  iconRight = null,\n  children,\n  title,\n  enableBackgroundBottomInsets,\n  enableBackgroundTopInsets,\n  displayStatus,\n  iconLeftOpacity = 1,\n  textAlign = 'left',\n  status,\n  hidestar = true\n}: AppContainerT) {\n  return (\n    <View style={styles.container}>\n      {title && header && (\n        <Header\n          displayStatus={displayStatus}\n          textAlign={textAlign}\n          title={title}\n          onPress={onPress}\n          iconLeftOpacity={iconLeftOpacity}\n          onPressRight={onPressRight}\n          iconLeft={iconLeft}\n          iconRight={iconRight}\n          hidestar={hidestar}\n        />\n      )}\n      <Background\n        enableTopInsets={enableBackgroundTopInsets}\n        enableBottomInsets={enableBackgroundBottomInsets}\n        status={status}\n      >\n        {children}\n      </Background>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: '100%'\n  }\n})\n","resolvedModuleNames":["/Users/playra/leela/src/components/Background/index.tsx","/Users/playra/leela/src/components/Header/index.tsx","/Users/playra/leela/src/components/Background/images/index.ts","/Users/playra/leela/src/hooks/index.ts","/Users/playra/leela/src/providers/RevenueCatProvider.tsx","/Users/playra/leela/src/components/index.ts","/Users/playra/leela/src/constants.ts","/Users/playra/leela/src/components/Pressable/index.tsx","/Users/playra/leela/src/store/index.ts"]}],["/Users/playra/leela/src/components/Background/index.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport {\n  Image,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n  useWindowDimensions\n} from 'react-native'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nimport { ICONS } from './images'\n\nimport { useImageAspect } from '../../hooks'\n\ninterface BackgroundT {\n  status?: 'bg' | 'clean' | '1x1'\n  children: React.ReactNode\n  sourceImages?: [string, string] | [string]\n  style?: StyleProp<ViewStyle>\n  enableBottomInsets?: boolean\n  enableTopInsets?: boolean\n  paddingTop?: number\n}\n\nexport const Background = memo(\n  ({\n    status = 'bg',\n    sourceImages,\n    children,\n    style,\n    paddingTop = 0,\n    enableBottomInsets,\n    enableTopInsets\n  }: BackgroundT) => {\n    const images =\n      ICONS.find((x) => x.title === status)?.paths || sourceImages || []\n    const { bottom, top } = useSafeAreaInsets()\n\n    return (\n      <View style={styles.container} testID=\"container\">\n        <View\n          testID=\"imgContainer\"\n          style={[\n            styles.imgContainer,\n            style,\n            enableBottomInsets && { paddingBottom: bottom },\n            enableTopInsets && { paddingTop: top + paddingTop }\n          ]}\n        >\n          {images.map((img, id) => (\n            <RenderImagePart\n              img={img}\n              id={id}\n              images={images}\n              isUri={!!sourceImages}\n              key={`${img}-${id}`}\n            />\n          ))}\n        </View>\n        {children}\n      </View>\n    )\n  }\n)\n\ninterface RenderImagePartT {\n  img: string | any\n  id: number\n  isUri?: boolean\n  images: any[]\n}\n\nexport const RenderImagePart = ({ img, id, isUri }: RenderImagePartT) => {\n  const { width: W } = useWindowDimensions()\n  const aspect = useImageAspect(img, !isUri)\n\n  const height = W / aspect\n  //const isOne = images?.length\n  const isTop = id === 0\n  return (\n    <View\n      style={[styles.subImgContainer, !isTop && styles.bottomImage]}\n      key={`${img}-${id}`}\n      testID=\"subImgContainer\"\n    >\n      <Image\n        testID=\"imgStyle\"\n        source={isUri ? { uri: img } : img}\n        style={[styles.imgStyle, { height }]}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  bottomImage: {\n    justifyContent: 'flex-end'\n  },\n  imgContainer: {\n    position: 'absolute',\n    height: '100%',\n    width: '100%'\n  },\n  imgStyle: {\n    width: '100%',\n    marginVertical: 10\n  },\n  subImgContainer: {\n    flex: 1\n  }\n})\n","resolvedModuleNames":["/Users/playra/leela/src/components/Background/images/index.ts","/Users/playra/leela/src/hooks/index.ts","/Users/playra/leela/src/hooks/useExitModal.ts","/Users/playra/leela/src/hooks/useGameAndProfileIsOnline.ts","/Users/playra/leela/src/hooks/useKeychain.ts","/Users/playra/leela/src/hooks/useNetwork.ts","/Users/playra/leela/src/hooks/useTypedNavigation.ts","/Users/playra/leela/src/hooks/useNoBackHandler.ts","/Users/playra/leela/src/hooks/useLeftTimeForStep.ts","/Users/playra/leela/src/hooks/useHistoryData.ts","/Users/playra/leela/src/hooks/useMarkdownProps.tsx","/Users/playra/leela/src/hooks/useImageAspect.tsx"]}],["/Users/playra/leela/src/components/Background/Background.test.tsx",{"fileContent":"import React from 'react'\nimport { render } from '@testing-library/react-native'\n\nimport { Background, RenderImagePart } from './' // Update with your actual path\nimport { Text } from 'react-native'\n\ndescribe('Background', () => {\n  it('renders correctly', () => {\n    const { getByTestId } = render(\n      <Background\n        status=\"bg\"\n        sourceImages={['img1', 'img2']}\n        enableBottomInsets={true}\n        enableTopInsets={true}\n      >\n        <Text>Test</Text>\n      </Background>\n    )\n\n    expect(getByTestId('container')).toBeTruthy()\n    expect(getByTestId('imgContainer')).toBeTruthy()\n  })\n})\n\ndescribe('RenderImagePart', () => {\n  it('renders correctly', () => {\n    const { getByTestId } = render(\n      <RenderImagePart\n        img=\"testImg\"\n        id={0}\n        isUri={false}\n        images={['img1', 'img2']}\n      />\n    )\n\n    expect(getByTestId('subImgContainer')).toBeTruthy()\n    expect(getByTestId('imgStyle')).toBeTruthy()\n  })\n})\n","resolvedModuleNames":["/Users/playra/leela/src/components/Background/index.tsx","/Users/playra/leela/src/components/Background/images/index.ts","/Users/playra/leela/src/hooks/index.ts"]}]]