c6fd8bd590f83ebba77deb3a3be6ba22
Object.defineProperty(exports, "__esModule", { value: true });exports.ReactNativeScope = void 0;var _hub = require("@sentry/hub");
var _wrapper = require("./wrapper");function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return typeof key === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (typeof input !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (typeof res !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function _get() {if (typeof Reflect !== "undefined" && Reflect.get) {_get = Reflect.get.bind();} else {_get = function _get(target, property, receiver) {var base = _superPropBase(target, property);if (!base) return;var desc = Object.getOwnPropertyDescriptor(base, property);if (desc.get) {return desc.get.call(arguments.length < 3 ? target : receiver);}return desc.value;};}return _get.apply(this, arguments);}function _superPropBase(object, property) {while (!Object.prototype.hasOwnProperty.call(object, property)) {object = _getPrototypeOf(object);if (object === null) break;}return object;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}var



ReactNativeScope = function (_Scope) {_inherits(ReactNativeScope, _Scope);var _super = _createSuper(ReactNativeScope);function ReactNativeScope() {_classCallCheck(this, ReactNativeScope);return _super.apply(this, arguments);}_createClass(ReactNativeScope, [{ key: "setUser", value:



    function setUser(user) {
      _wrapper.NATIVE.setUser(user);
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "setUser", this).call(this, user);
    } }, { key: "setTag", value:



    function setTag(key, value) {
      _wrapper.NATIVE.setTag(key, value);
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "setTag", this).call(this, key, value);
    } }, { key: "setTags", value:



    function setTags(tags) {

      Object.keys(tags).forEach(function (key) {
        _wrapper.NATIVE.setTag(key, tags[key]);
      });
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "setTags", this).call(this, tags);
    } }, { key: "setExtras", value:




    function setExtras(extras) {
      Object.keys(extras).forEach(function (key) {
        _wrapper.NATIVE.setExtra(key, extras[key]);
      });
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "setExtras", this).call(this, extras);
    } }, { key: "setExtra", value:




    function setExtra(key, extra) {
      _wrapper.NATIVE.setExtra(key, extra);
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "setExtra", this).call(this, key, extra);
    } }, { key: "addBreadcrumb", value:



    function addBreadcrumb(breadcrumb, maxBreadcrumbs) {
      _wrapper.NATIVE.addBreadcrumb(breadcrumb);
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "addBreadcrumb", this).call(this, breadcrumb, maxBreadcrumbs);
    } }, { key: "clearBreadcrumbs", value:



    function clearBreadcrumbs() {
      _wrapper.NATIVE.clearBreadcrumbs();
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "clearBreadcrumbs", this).call(this);
    } }, { key: "setContext", value:




    function setContext(key, context) {
      _wrapper.NATIVE.setContext(key, context);
      return _get(_getPrototypeOf(ReactNativeScope.prototype), "setContext", this).call(this, key, context);
    } }]);return ReactNativeScope;}(_hub.Scope);exports.ReactNativeScope = ReactNativeScope;