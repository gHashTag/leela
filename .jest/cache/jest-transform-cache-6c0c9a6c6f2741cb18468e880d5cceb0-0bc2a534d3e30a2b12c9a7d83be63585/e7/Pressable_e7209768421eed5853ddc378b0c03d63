61e0e04f8ca6cfdf7c9fd47742a86a0e
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;









var React = _interopRequireWildcard(require("react"));

var _useAndroidRippleForView = _interopRequireDefault(require("./useAndroidRippleForView"));









var _PressabilityDebug = require("../../Pressability/PressabilityDebug");
var _usePressability = _interopRequireDefault(require("../../Pressability/usePressability"));






var _View = _interopRequireDefault(require("../View/View"));var _jsxRuntime = require("react/jsx-runtime");var _jsxFileName = "/Users/playra/leela/node_modules/react-native/Libraries/Components/Pressable/Pressable.js";var _excluded = ["accessible", "android_disableSound", "android_ripple", "cancelable", "children", "delayHoverIn", "delayHoverOut", "delayLongPress", "disabled", "focusable", "hitSlop", "onHoverIn", "onHoverOut", "onLongPress", "onPress", "onPressIn", "onPressOut", "pressRetentionOffset", "style", "testOnly_pressed", "unstable_pressDelay"];function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}















































































































































function Pressable(props, forwardedRef) {
  var
    accessible =





















    props.accessible,android_disableSound = props.android_disableSound,android_ripple = props.android_ripple,cancelable = props.cancelable,children = props.children,delayHoverIn = props.delayHoverIn,delayHoverOut = props.delayHoverOut,delayLongPress = props.delayLongPress,disabled = props.disabled,focusable = props.focusable,hitSlop = props.hitSlop,onHoverIn = props.onHoverIn,onHoverOut = props.onHoverOut,onLongPress = props.onLongPress,onPress = props.onPress,_onPressIn = props.onPressIn,_onPressOut = props.onPressOut,pressRetentionOffset = props.pressRetentionOffset,style = props.style,testOnly_pressed = props.testOnly_pressed,unstable_pressDelay = props.unstable_pressDelay,restProps = _objectWithoutProperties(props, _excluded);

  var viewRef = (0, React.useRef)(null);
  (0, React.useImperativeHandle)(forwardedRef, function () {return viewRef.current;});

  var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);

  var _usePressState = usePressState(testOnly_pressed === true),_usePressState2 = _slicedToArray(_usePressState, 2),pressed = _usePressState2[0],setPressed = _usePressState2[1];

  var accessibilityState =
  disabled != null ? Object.assign({},
  props.accessibilityState, { disabled: disabled }) :
  props.accessibilityState;

  var restPropsWithDefaults = Object.assign({},
  restProps,
  android_rippleConfig == null ? void 0 : android_rippleConfig.viewProps, {
    accessible: accessible !== false,
    accessibilityState: accessibilityState,
    focusable: focusable !== false,
    hitSlop: hitSlop });


  var config = (0, React.useMemo)(
    function () {return {
        cancelable: cancelable,
        disabled: disabled,
        hitSlop: hitSlop,
        pressRectOffset: pressRetentionOffset,
        android_disableSound: android_disableSound,
        delayHoverIn: delayHoverIn,
        delayHoverOut: delayHoverOut,
        delayLongPress: delayLongPress,
        delayPressIn: unstable_pressDelay,
        onHoverIn: onHoverIn,
        onHoverOut: onHoverOut,
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: function onPressIn(event) {
          if (android_rippleConfig != null) {
            android_rippleConfig.onPressIn(event);
          }
          setPressed(true);
          if (_onPressIn != null) {
            _onPressIn(event);
          }
        },
        onPressMove: android_rippleConfig == null ? void 0 : android_rippleConfig.onPressMove,
        onPressOut: function onPressOut(event) {
          if (android_rippleConfig != null) {
            android_rippleConfig.onPressOut(event);
          }
          setPressed(false);
          if (_onPressOut != null) {
            _onPressOut(event);
          }
        }
      };},
    [
    android_disableSound,
    android_rippleConfig,
    cancelable,
    delayHoverIn,
    delayHoverOut,
    delayLongPress,
    disabled,
    hitSlop,
    onHoverIn,
    onHoverOut,
    onLongPress,
    onPress,
    _onPressIn,
    _onPressOut,
    pressRetentionOffset,
    setPressed,
    unstable_pressDelay]

  );
  var eventHandlers = (0, _usePressability.default)(config);

  return (
    (0, _jsxRuntime.jsxs)(_View.default, Object.assign({},
    restPropsWithDefaults,
    eventHandlers, {
      ref: viewRef,
      style: typeof style === 'function' ? style({ pressed: pressed }) : style,
      collapsable: false, children: [
      typeof children === 'function' ? children({ pressed: pressed }) : children,
      __DEV__ ? (0, _jsxRuntime.jsx)(_PressabilityDebug.PressabilityDebugView, { color: "red", hitSlop: hitSlop }) : null] })
    ));

}

function usePressState(forcePressed) {
  var _useState = (0, React.useState)(false),_useState2 = _slicedToArray(_useState, 2),pressed = _useState2[0],setPressed = _useState2[1];
  return [pressed || forcePressed, setPressed];
}

var MemoedPressable = React.memo(React.forwardRef(Pressable));
MemoedPressable.displayName = 'Pressable';var _default =

MemoedPressable;exports.default = _default;