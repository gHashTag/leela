ded443c398aa41b935b3f701e9635451
Object.defineProperty(exports, "__esModule", { value: true });exports.isAlphaNumericUnderscore = isAlphaNumericUnderscore;exports.isArray = isArray;exports.isBoolean = isBoolean;exports.isDate = isDate;exports.isFinite = isFinite;exports.isFunction = isFunction;exports.isInteger = isInteger;exports.isNull = isNull;exports.isNumber = isNumber;exports.isObject = isObject;exports.isOneOf = isOneOf;exports.isString = isString;exports.isUndefined = isUndefined;exports.isValidUrl = isValidUrl;exports.noop = noop;exports.objectKeyValuesAreStrings = objectKeyValuesAreStrings;exports.validateOptionalNativeDependencyExists = validateOptionalNativeDependencyExists;
















var _reactNative = require("react-native");function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

var AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;

function objectKeyValuesAreStrings(object) {
  if (!isObject(object)) {
    return false;
  }

  var entries = Object.entries(object);

  for (var i = 0; i < entries.length; i++) {
    var _entries$i = _slicedToArray(entries[i], 2),key = _entries$i[0],value = _entries$i[1];
    if (!isString(key) || !isString(value)) {
      return false;
    }
  }

  return true;
}







function isNull(value) {
  return value === null;
}







function isObject(value) {
  return value ? typeof value === 'object' && !Array.isArray(value) && !isNull(value) : false;
}







function isDate(value) {

  return value && Object.prototype.toString.call(value) === '[object Date]' && !isNaN(value);
}







function isFunction(value) {
  return value ? typeof value === 'function' : false;
}






function isString(value) {
  return typeof value === 'string';
}






function isNumber(value) {
  return typeof value === 'number';
}






function isFinite(value) {
  return Number.isFinite(value);
}






function isInteger(value) {
  return Number.isInteger(value);
}







function isBoolean(value) {
  return typeof value === 'boolean';
}






function isArray(value) {
  return Array.isArray(value);
}






function isUndefined(value) {
  return typeof value === 'undefined';
}







function isAlphaNumericUnderscore(value) {
  return AlphaNumericUnderscore.test(value);
}






var IS_VALID_URL_REGEX = /^(http|https):\/\/[^ "]+$/;
function isValidUrl(url) {
  return IS_VALID_URL_REGEX.test(url);
}








function isOneOf(value) {var oneOf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (!isArray(oneOf)) {
    return false;
  }
  return oneOf.includes(value);
}

function noop() {

}

function validateOptionalNativeDependencyExists(firebaseJsonKey, apiName, nativeFnExists) {
  if (nativeFnExists) {
    return;
  }
  var errorMessage =
  "You attempted to use an optional API that's not enabled natively. \n\n To enable ";

  errorMessage += apiName;
  errorMessage += " please set the 'react-native' -> '" + firebaseJsonKey + "' key to true in your firebase.json file";

  if (_reactNative.Platform.OS === 'android') {
    errorMessage += ' and rebuild your Android app.';
  } else {
    errorMessage +=
    ', re-run pod install and rebuild your iOS app. ' +
    "If you're not using Pods then make sure you've have downloaded the necessary Firebase iOS SDK dependencies for this API.";
  }

  throw new Error(errorMessage);
}