da3b844eb6d7993ff272ab04ab60bce0
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_native_2 = require("react-native");
describe('<AppContainer />', function () {
  it('renders correctly', function () {
    var _ref = (0, react_native_1.render)(react_1.default.createElement(_1.AppContainer, {
        title: "Test Title"
      }, react_1.default.createElement(react_native_2.Text, null, "Child Component"))),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
    expect(getByText('Child Component')).toBeTruthy();
  });
  it('calls onPress when header is clicked', function () {
    var onPressMock = jest.fn();
    var _ref2 = (0, react_native_1.render)(react_1.default.createElement(_1.AppContainer, {
        title: "Test Title",
        onPress: onPressMock
      }, react_1.default.createElement(react_native_2.Text, null, "Child Component"))),
      getByTestId = _ref2.getByTestId;
    react_native_1.fireEvent.press(getByTestId('header'));
    expect(onPressMock).toHaveBeenCalled();
  });
  it('does not render header if header prop is false', function () {
    var _ref3 = (0, react_native_1.render)(react_1.default.createElement(_1.AppContainer, {
        title: "Test Title",
        header: false
      }, react_1.default.createElement(react_native_2.Text, null, "Child Component"))),
      queryByText = _ref3.queryByText;
    expect(queryByText('Test Title')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiXzEiLCJyZWFjdF9uYXRpdmVfMiIsImRlc2NyaWJlIiwiaXQiLCJfcmVmIiwicmVuZGVyIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJBcHBDb250YWluZXIiLCJ0aXRsZSIsIlRleHQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzc01vY2siLCJqZXN0IiwiZm4iLCJfcmVmMiIsIm9uUHJlc3MiLCJnZXRCeVRlc3RJZCIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZWYzIiwiaGVhZGVyIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvbGVlbGEvc3JjL2NvbXBvbmVudHMvQXBwQ29udGFpbmVyL0FwcENvbnRhaW5lci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuXG5pbXBvcnQgeyBBcHBDb250YWluZXIgfSBmcm9tICcuLydcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmRlc2NyaWJlKCc8QXBwQ29udGFpbmVyIC8+JywgKCkgPT4ge1xuICBpdCgncmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxBcHBDb250YWluZXIgdGl0bGU9XCJUZXN0IFRpdGxlXCI+XG4gICAgICAgIDxUZXh0PkNoaWxkIENvbXBvbmVudDwvVGV4dD5cbiAgICAgIDwvQXBwQ29udGFpbmVyPlxuICAgIClcblxuICAgIGV4cGVjdChnZXRCeVRleHQoJ1Rlc3QgVGl0bGUnKSkudG9CZVRydXRoeSgpXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQ2hpbGQgQ29tcG9uZW50JykpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdjYWxscyBvblByZXNzIHdoZW4gaGVhZGVyIGlzIGNsaWNrZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgb25QcmVzc01vY2sgPSBqZXN0LmZuKClcblxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxBcHBDb250YWluZXIgdGl0bGU9XCJUZXN0IFRpdGxlXCIgb25QcmVzcz17b25QcmVzc01vY2t9PlxuICAgICAgICA8VGV4dD5DaGlsZCBDb21wb25lbnQ8L1RleHQ+XG4gICAgICA8L0FwcENvbnRhaW5lcj5cbiAgICApXG5cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2hlYWRlcicpKVxuICAgIGV4cGVjdChvblByZXNzTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG5cbiAgaXQoJ2RvZXMgbm90IHJlbmRlciBoZWFkZXIgaWYgaGVhZGVyIHByb3AgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEFwcENvbnRhaW5lciB0aXRsZT1cIlRlc3QgVGl0bGVcIiBoZWFkZXI9e2ZhbHNlfT5cbiAgICAgICAgPFRleHQ+Q2hpbGQgQ29tcG9uZW50PC9UZXh0PlxuICAgICAgPC9BcHBDb250YWluZXI+XG4gICAgKVxuXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCdUZXN0IFRpdGxlJykpLnRvQmVOdWxsKClcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLEVBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUgsT0FBQTtBQUVBSSxRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBSztFQUNoQ0MsRUFBRSxDQUFDLG1CQUFtQixFQUFFLFlBQUs7SUFDM0IsSUFBQUMsSUFBQSxHQUFzQixJQUFBTCxjQUFBLENBQUFNLE1BQU0sRUFDMUJULE9BQUEsQ0FBQVUsT0FBQSxDQUFBQyxhQUFBLENBQUNQLEVBQUEsQ0FBQVEsWUFBWTtRQUFDQyxLQUFLLEVBQUM7TUFBWSxHQUM5QmIsT0FBQSxDQUFBVSxPQUFBLENBQUFDLGFBQUEsQ0FBQ04sY0FBQSxDQUFBUyxJQUFJLDBCQUF1QixDQUNmLENBQ2hCO01BSk9DLFNBQVMsR0FBQVAsSUFBQSxDQUFUTyxTQUFTO0lBTWpCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7SUFDNUNELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0VBQ25ELENBQUMsQ0FBQztFQUVGVixFQUFFLENBQUMsc0NBQXNDLEVBQUUsWUFBSztJQUM5QyxJQUFNVyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBRTdCLElBQUFDLEtBQUEsR0FBd0IsSUFBQWxCLGNBQUEsQ0FBQU0sTUFBTSxFQUM1QlQsT0FBQSxDQUFBVSxPQUFBLENBQUFDLGFBQUEsQ0FBQ1AsRUFBQSxDQUFBUSxZQUFZO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNTLE9BQU8sRUFBRUo7TUFBVyxHQUNuRGxCLE9BQUEsQ0FBQVUsT0FBQSxDQUFBQyxhQUFBLENBQUNOLGNBQUEsQ0FBQVMsSUFBSSwwQkFBdUIsQ0FDZixDQUNoQjtNQUpPUyxXQUFXLEdBQUFGLEtBQUEsQ0FBWEUsV0FBVztJQU1uQnBCLGNBQUEsQ0FBQXFCLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDRixXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdENQLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDLENBQUNRLGdCQUFnQixFQUFFO0VBQ3hDLENBQUMsQ0FBQztFQUVGbkIsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLFlBQUs7SUFDeEQsSUFBQW9CLEtBQUEsR0FBd0IsSUFBQXhCLGNBQUEsQ0FBQU0sTUFBTSxFQUM1QlQsT0FBQSxDQUFBVSxPQUFBLENBQUFDLGFBQUEsQ0FBQ1AsRUFBQSxDQUFBUSxZQUFZO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNlLE1BQU0sRUFBRTtNQUFLLEdBQzVDNUIsT0FBQSxDQUFBVSxPQUFBLENBQUFDLGFBQUEsQ0FBQ04sY0FBQSxDQUFBUyxJQUFJLDBCQUF1QixDQUNmLENBQ2hCO01BSk9lLFdBQVcsR0FBQUYsS0FBQSxDQUFYRSxXQUFXO0lBTW5CYixNQUFNLENBQUNhLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDQyxRQUFRLEVBQUU7RUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=