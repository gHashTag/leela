15f92286b0f8541c8eff747cd2b7cdd4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OnlinePlayer = void 0;
var auth_1 = __importDefault(require("@react-native-firebase/auth"));
var firestore_1 = __importDefault(require("@react-native-firebase/firestore"));
var storage_1 = __importDefault(require("@react-native-firebase/storage"));
var mobx_1 = require("mobx");
var Keychain = __importStar(require("react-native-keychain"));
var i18n_1 = __importDefault(require("../i18n"));
var helper_1 = require("./helper");
var MessagingStore_1 = require("./MessagingStore");
var _1 = require("./");
var constants_1 = require("../constants");
var helper_2 = require("../screens/helper");
var initProfile = {
  firstName: '',
  lastName: '',
  email: '',
  intention: ''
};
var initHistory = function initHistory() {
  return [{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }];
};
exports.OnlinePlayer = (0, mobx_1.makeAutoObservable)({
  store: {
    start: false,
    finish: false,
    stepTime: 0,
    timeText: ' ',
    canGo: false,
    plan: 68,
    firstGame: false,
    loadingProf: true,
    history: initHistory(),
    isReported: true,
    avatar: '',
    profile: initProfile,
    isPosterLoading: false
  },
  resetGame: function () {
    var _resetGame = (0, _asyncToGenerator2.default)(function* () {
      try {
        exports.OnlinePlayer.store = Object.assign({}, exports.OnlinePlayer.store, {
          start: false,
          finish: false,
          plan: 68,
          history: initHistory()
        });
        yield (0, helper_2.resetPlayer)();
        yield (0, helper_2.resetHistory)();
        yield (0, helper_2.updatePlan)(68);
        _1.DiceStore.online = false;
      } catch (err) {
        (0, constants_1.captureException)(err, 'resetGame');
      }
    });
    function resetGame() {
      return _resetGame.apply(this, arguments);
    }
    return resetGame;
  }(),
  SignOut: function () {
    var _SignOut = (0, _asyncToGenerator2.default)(function* () {
      try {
        var _currentUser;
        var userUid = (_currentUser = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser.uid;
        yield (0, helper_2.getFireBaseRef)("/online/" + userUid).set(false);
        yield (0, MessagingStore_1.delTokenOnSignOut)();
        exports.OnlinePlayer.store = Object.assign({}, exports.OnlinePlayer.store, {
          profile: initProfile,
          avatar: '',
          start: false,
          finish: false,
          plan: 68,
          history: initHistory(),
          canGo: false,
          stepTime: 0,
          timeText: ' ',
          loadingProf: true
        });
        _1.actionsDice.resetPlayer();
        yield Keychain.resetInternetCredentials('auth');
        yield (0, auth_1.default)().signOut();
        _1.actionSubscribeStore.resetStore();
        _1.DiceStore.online = false;
        (0, constants_1.navigate)('HELLO');
      } catch (err) {
        (0, constants_1.captureException)(err, 'SignOut');
      }
    });
    function SignOut() {
      return _SignOut.apply(this, arguments);
    }
    return SignOut;
  }(),
  SignOutToOffline: function () {
    var _SignOutToOffline = (0, _asyncToGenerator2.default)(function* () {
      try {
        exports.OnlinePlayer.store = Object.assign({}, exports.OnlinePlayer.store, {
          profile: initProfile,
          avatar: '',
          start: false,
          finish: false,
          plan: 68,
          history: initHistory(),
          canGo: false,
          stepTime: 0,
          timeText: ' ',
          loadingProf: true
        });
        _1.actionsDice.resetPlayer();
        _1.actionSubscribeStore.resetStore();
        yield (0, auth_1.default)().signOut();
      } catch (err) {
        (0, constants_1.captureException)(err, 'SignOutToOffline');
      }
    });
    function SignOutToOffline() {
      return _SignOutToOffline.apply(this, arguments);
    }
    return SignOutToOffline;
  }(),
  getProfile: function () {
    var _getProfile = (0, _asyncToGenerator2.default)(function* () {
      try {
        exports.OnlinePlayer.store.loadingProf = true;
        var curProf = yield (0, helper_2.getProfile)();
        if (curProf) {
          exports.OnlinePlayer.store = Object.assign({}, exports.OnlinePlayer.store, {
            plan: curProf.plan,
            start: curProf.start,
            finish: curProf.finish,
            firstGame: curProf.firstGame,
            profile: {
              firstName: curProf.firstName,
              lastName: curProf.lastName,
              email: curProf.email,
              intention: curProf.intention || ''
            },
            isReported: curProf.isReported,
            flagEmoji: curProf.flagEmoji,
            stepTime: curProf.lastStepTime,
            canGo: Date.now() - curProf.lastStepTime >= 86400000,
            status: curProf == null ? void 0 : curProf.status,
            history: curProf.history.sort(function (a, b) {
              return b.createDate - a.createDate;
            }).slice(0, 30)
          });
          if (curProf.plan === 68 && !curProf.finish) {
            _1.actionsDice.setMessage(i18n_1.default.t('sixToBegin'));
          } else {
            _1.actionsDice.setMessage(' ');
          }
          exports.OnlinePlayer.store.avatar = yield (0, helper_2.getIMG)(curProf.avatar);
          _1.DiceStore.startGame = curProf.start;
        }
        exports.OnlinePlayer.store.loadingProf = false;
      } catch (error) {
        (0, constants_1.captureException)(error, 'getProfile');
      }
    });
    function getProfile() {
      return _getProfile.apply(this, arguments);
    }
    return getProfile;
  }(),
  uploadImage: function () {
    var _uploadImage = (0, _asyncToGenerator2.default)(function* () {
      try {
        var image = yield (0, helper_2.getImagePicker)();
        if (image) {
          try {
            var _currentUser2, _currentUser3, _currentUser4;
            var fileName = yield (0, helper_2.uploadImg)(image);
            var prevImgUrl = (_currentUser2 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser2.photoURL;
            if (prevImgUrl) {
              yield (0, storage_1.default)().ref(prevImgUrl).delete();
            }
            yield (_currentUser3 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser3.updateProfile({
              photoURL: fileName
            });
            yield (0, firestore_1.default)().collection('Profiles').doc((_currentUser4 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser4.uid).update({
              avatar: fileName
            });
            exports.OnlinePlayer.store.avatar = yield (0, helper_2.getIMG)(fileName);
          } catch (error) {
            (0, constants_1.captureException)(error, 'uploadImage');
          }
        }
      } catch (error) {
        (0, constants_1.captureException)(error, 'uploadImage');
      }
    });
    function uploadImage() {
      return _uploadImage.apply(this, arguments);
    }
    return uploadImage;
  }(),
  updateStep: function () {
    var _updateStep = (0, _asyncToGenerator2.default)(function* () {
      (0, helper_1.upStepOnline)();
    });
    function updateStep() {
      return _updateStep.apply(this, arguments);
    }
    return updateStep;
  }(),
  getLeftTime: function getLeftTime(lastTime) {
    var day = 86400000;
    var hour = 3600000;
    var min = 60000;
    var sec = 1000;
    var dateNow = Date.now();
    var passTime = dateNow - lastTime;
    var difference = day - passTime;
    if (difference <= 0) {
      return '0';
    } else if (difference < min) {
      var secCount = Math.round(difference / sec);
      return secCount + " " + i18n_1.default.t('timestamps-short.sec');
    } else if (difference < hour) {
      var minCount = Math.round(difference / min);
      return minCount + " " + i18n_1.default.t('timestamps-short.min');
    } else {
      var hourCount = Math.round(difference / hour);
      return hourCount + " " + i18n_1.default.t('timestamps-short.h');
    }
  },
  deleteUser: function () {
    var _deleteUser = (0, _asyncToGenerator2.default)(function* () {
      try {
        var _currentUser5;
        var userUid = (_currentUser5 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser5.uid;
        yield (0, helper_2.getFireBaseRef)("/online/" + userUid).set(false);
        yield (0, MessagingStore_1.delTokenOnSignOut)();
        var user = (0, auth_1.default)().currentUser;
        user === null ? null : user.delete().catch(function (error) {
          return (0, constants_1.captureException)(error, 'deleteUser');
        });
        (0, constants_1.navigate)('HELLO');
      } catch (err) {
        (0, constants_1.captureException)(err, 'deleteUser');
      }
    });
    function deleteUser() {
      return _deleteUser.apply(this, arguments);
    }
    return deleteUser;
  }()
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,