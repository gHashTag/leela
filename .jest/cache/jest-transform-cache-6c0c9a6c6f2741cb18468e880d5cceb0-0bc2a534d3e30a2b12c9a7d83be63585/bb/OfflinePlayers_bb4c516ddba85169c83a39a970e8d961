41cff554936badc3184a001242253674
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OfflinePlayers = exports.initStore = void 0;
var async_storage_1 = __importDefault(require("@react-native-async-storage/async-storage"));
var mobx_1 = require("mobx");
var mobx_persist_store_1 = require("mobx-persist-store");
var i18n_1 = __importDefault(require("../i18n"));
var helper_1 = require("./helper");
var _1 = require("./");
var constants_1 = require("../constants");
var storageAdapter_1 = require("./storageAdapter");
exports.initStore = {
  start: [false, false, false, false, false, false],
  finish: [false, false, false, false, false, false],
  plans: [68, 68, 68, 68, 68, 68],
  histories: [[{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }], [{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }], [{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }], [{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }], [{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }], [{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }], [{
    createDate: Date.now(),
    plan: 68,
    count: 0,
    status: 'start'
  }]]
};
exports.OfflinePlayers = {
  store: (0, mobx_1.makeAutoObservable)(Object.assign({}, exports.initStore)),
  resetGame: function () {
    var _resetGame = (0, _asyncToGenerator2.default)(function* () {
      _1.actionsDice.resetPlayer();
      yield async_storage_1.default.clear();
      exports.OfflinePlayers.store.plans = exports.initStore.plans;
      exports.OfflinePlayers.store.start = exports.initStore.start;
      exports.OfflinePlayers.store.histories = exports.initStore.histories;
      exports.OfflinePlayers.store.finish = exports.initStore.finish;
      (0, constants_1.navigate)('HELLO');
    });
    function resetGame() {
      return _resetGame.apply(this, arguments);
    }
    return resetGame;
  }(),
  startGame: function startGame() {
    _1.actionsDice.setMessage(i18n_1.default.t('sixToBegin'));
  },
  updateStep: function updateStep(id) {
    (0, helper_1.upStepOffline)(id);
  }
};
(0, mobx_persist_store_1.makePersistable)(exports.OfflinePlayers.store, {
  name: 'OfflinePlayers',
  properties: ['plans', 'start', 'histories', 'finish'],
  storage: storageAdapter_1.storageAdapter
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3luY19zdG9yYWdlXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwibW9ieF8xIiwibW9ieF9wZXJzaXN0X3N0b3JlXzEiLCJpMThuXzEiLCJoZWxwZXJfMSIsIl8xIiwiY29uc3RhbnRzXzEiLCJzdG9yYWdlQWRhcHRlcl8xIiwiZXhwb3J0cyIsImluaXRTdG9yZSIsInN0YXJ0IiwiZmluaXNoIiwicGxhbnMiLCJoaXN0b3JpZXMiLCJjcmVhdGVEYXRlIiwiRGF0ZSIsIm5vdyIsInBsYW4iLCJjb3VudCIsInN0YXR1cyIsIk9mZmxpbmVQbGF5ZXJzIiwic3RvcmUiLCJtYWtlQXV0b09ic2VydmFibGUiLCJPYmplY3QiLCJhc3NpZ24iLCJyZXNldEdhbWUiLCJfcmVzZXRHYW1lIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsImFjdGlvbnNEaWNlIiwicmVzZXRQbGF5ZXIiLCJjbGVhciIsIm5hdmlnYXRlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzdGFydEdhbWUiLCJzZXRNZXNzYWdlIiwidCIsInVwZGF0ZVN0ZXAiLCJpZCIsInVwU3RlcE9mZmxpbmUiLCJtYWtlUGVyc2lzdGFibGUiLCJuYW1lIiwicHJvcGVydGllcyIsInN0b3JhZ2UiLCJzdG9yYWdlQWRhcHRlciJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvbGVlbGEvc3JjL3N0b3JlL09mZmxpbmVQbGF5ZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnXG5pbXBvcnQgeyBtYWtlQXV0b09ic2VydmFibGUgfSBmcm9tICdtb2J4J1xuaW1wb3J0IHsgbWFrZVBlcnNpc3RhYmxlIH0gZnJvbSAnbW9ieC1wZXJzaXN0LXN0b3JlJ1xuaW1wb3J0IGkxOG5leHQgZnJvbSAnLi4vaTE4bidcblxuaW1wb3J0IHsgdXBTdGVwT2ZmbGluZSB9IGZyb20gJy4vaGVscGVyJ1xuXG5pbXBvcnQgeyBhY3Rpb25zRGljZSB9IGZyb20gJy4vJ1xuaW1wb3J0IHsgbmF2aWdhdGUgfSBmcm9tICcuLi9jb25zdGFudHMnXG5pbXBvcnQgeyBIaXN0b3J5VCB9IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgc3RvcmFnZUFkYXB0ZXIgfSBmcm9tICcuL3N0b3JhZ2VBZGFwdGVyJ1xuXG5leHBvcnQgY29uc3QgaW5pdFN0b3JlID0ge1xuICBzdGFydDogW2ZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdLFxuICBmaW5pc2g6IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlXSxcbiAgcGxhbnM6IFs2OCwgNjgsIDY4LCA2OCwgNjgsIDY4XSxcbiAgaGlzdG9yaWVzOiBbXG4gICAgW3sgY3JlYXRlRGF0ZTogRGF0ZS5ub3coKSwgcGxhbjogNjgsIGNvdW50OiAwLCBzdGF0dXM6ICdzdGFydCcgfV0sXG4gICAgW3sgY3JlYXRlRGF0ZTogRGF0ZS5ub3coKSwgcGxhbjogNjgsIGNvdW50OiAwLCBzdGF0dXM6ICdzdGFydCcgfV0sXG4gICAgW3sgY3JlYXRlRGF0ZTogRGF0ZS5ub3coKSwgcGxhbjogNjgsIGNvdW50OiAwLCBzdGF0dXM6ICdzdGFydCcgfV0sXG4gICAgW3sgY3JlYXRlRGF0ZTogRGF0ZS5ub3coKSwgcGxhbjogNjgsIGNvdW50OiAwLCBzdGF0dXM6ICdzdGFydCcgfV0sXG4gICAgW3sgY3JlYXRlRGF0ZTogRGF0ZS5ub3coKSwgcGxhbjogNjgsIGNvdW50OiAwLCBzdGF0dXM6ICdzdGFydCcgfV0sXG4gICAgW3sgY3JlYXRlRGF0ZTogRGF0ZS5ub3coKSwgcGxhbjogNjgsIGNvdW50OiAwLCBzdGF0dXM6ICdzdGFydCcgfV0sXG4gICAgW3sgY3JlYXRlRGF0ZTogRGF0ZS5ub3coKSwgcGxhbjogNjgsIGNvdW50OiAwLCBzdGF0dXM6ICdzdGFydCcgfV1cbiAgXVxufVxuXG5leHBvcnQgY29uc3QgT2ZmbGluZVBsYXllcnMgPSB7XG4gIHN0b3JlOiBtYWtlQXV0b09ic2VydmFibGU8T2ZmbGluZVBsYXllcnNJPih7IC4uLmluaXRTdG9yZSB9KSxcbiAgYXN5bmMgcmVzZXRHYW1lKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGFjdGlvbnNEaWNlLnJlc2V0UGxheWVyKClcbiAgICBhd2FpdCBBc3luY1N0b3JhZ2UuY2xlYXIoKVxuICAgIC8qINCy0Ysg0L/QvtC00YPQvNCw0LXRgtC1INGC0YPRgiDQvNC+0LbQvdC+INGN0YLQviDQstGB0LUg0LfQsNC80LXQvdC40YLRjCAxINGB0YLRgNC+0YfQutC+0Lk6XG4gICAgYGAgT2ZmbGluZVBsYXllcnMuc3RvcmUgPSB7Li4uaW5pdFN0b3JlfSBgYCwg0LAg0L3QtdGCLiDQotCw0LpcbiAgICDQsiBwZXJzaXN0LXN0b3JlINGA0LXQt9GD0LvRjNGC0LDRgiDQvdC1INGB0L7RhdGA0LDQvdGP0LXRgtGB0Y8gKi9cbiAgICBPZmZsaW5lUGxheWVycy5zdG9yZS5wbGFucyA9IGluaXRTdG9yZS5wbGFuc1xuICAgIE9mZmxpbmVQbGF5ZXJzLnN0b3JlLnN0YXJ0ID0gaW5pdFN0b3JlLnN0YXJ0XG4gICAgT2ZmbGluZVBsYXllcnMuc3RvcmUuaGlzdG9yaWVzID0gaW5pdFN0b3JlLmhpc3Rvcmllc1xuICAgIE9mZmxpbmVQbGF5ZXJzLnN0b3JlLmZpbmlzaCA9IGluaXRTdG9yZS5maW5pc2hcbiAgICBuYXZpZ2F0ZSgnSEVMTE8nKVxuICB9LFxuICBzdGFydEdhbWUoKSB7XG4gICAgYWN0aW9uc0RpY2Uuc2V0TWVzc2FnZShpMThuZXh0LnQoJ3NpeFRvQmVnaW4nKSlcbiAgfSxcbiAgdXBkYXRlU3RlcChpZDogbnVtYmVyKTogdm9pZCB7XG4gICAgdXBTdGVwT2ZmbGluZShpZClcbiAgfVxufVxuXG5tYWtlUGVyc2lzdGFibGUoT2ZmbGluZVBsYXllcnMuc3RvcmUsIHtcbiAgbmFtZTogJ09mZmxpbmVQbGF5ZXJzJyxcbiAgcHJvcGVydGllczogWydwbGFucycsICdzdGFydCcsICdoaXN0b3JpZXMnLCAnZmluaXNoJ10sXG4gIHN0b3JhZ2U6IHN0b3JhZ2VBZGFwdGVyXG59KVxuXG5pbnRlcmZhY2UgT2ZmbGluZVBsYXllcnNJIHtcbiAgc3RhcnQ6IGJvb2xlYW5bXVxuICBmaW5pc2g6IGJvb2xlYW5bXVxuICBwbGFuczogbnVtYmVyW11cbiAgaGlzdG9yaWVzOiBIaXN0b3J5VFtdW11cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGVBQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsb0JBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUosZUFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBRUEsSUFBQUssRUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBRUEsSUFBQU8sZ0JBQUEsR0FBQVAsT0FBQTtBQUVhUSxPQUFBLENBQUFDLFNBQVMsR0FBRztFQUN2QkMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7RUFDakRDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0VBQ2xEQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztFQUMvQkMsU0FBUyxFQUFFLENBQ1QsQ0FBQztJQUFFQyxVQUFVLEVBQUVDLElBQUksQ0FBQ0MsR0FBRyxFQUFFO0lBQUVDLElBQUksRUFBRSxFQUFFO0lBQUVDLEtBQUssRUFBRSxDQUFDO0lBQUVDLE1BQU0sRUFBRTtFQUFPLENBQUUsQ0FBQyxFQUNqRSxDQUFDO0lBQUVMLFVBQVUsRUFBRUMsSUFBSSxDQUFDQyxHQUFHLEVB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