f9da921536f14c7e234799e585dd3bba
Object.defineProperty(exports, "__esModule", { value: true });exports.ReactNativeBackend = void 0;var _tslib = require("tslib");
var _backend = require("@sentry/browser/dist/backend");
var _core = require("@sentry/core");
var _react = require("@sentry/react");
var _types = require("@sentry/types");

var _reactNative = require("react-native");
var _native = require("./transports/native");
var _wrapper = require("./wrapper");function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return typeof key === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (typeof input !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (typeof res !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}var

ReactNativeBackend = function (_BaseBackend) {_inherits(ReactNativeBackend, _BaseBackend);var _super = _createSuper(ReactNativeBackend);

  function ReactNativeBackend(_options) {var _this;_classCallCheck(this, ReactNativeBackend);
    _this = _super.call(this, _options);
    _this._options = _options;
    _this._browserBackend = new _backend.BrowserBackend(_options);


    if (_reactNative.LogBox) {

      _reactNative.LogBox.ignoreLogs(['Require cycle:']);
    } else
    {

      _reactNative.YellowBox.ignoreWarnings(['Require cycle:']);
    }
    void _this._initNativeSdk();return _this;
  }_createClass(ReactNativeBackend, [{ key: "nativeCrash", value:




    function nativeCrash() {
      _wrapper.NATIVE.nativeCrash();
    } }, { key: "eventFromException", value:



    function eventFromException(exception, hint) {
      return this._browserBackend.eventFromException(exception, hint);
    } }, { key: "eventFromMessage", value:



    function eventFromMessage(message) {var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types.Severity.Info;var hint = arguments.length > 2 ? arguments[2] : undefined;
      return this._browserBackend.eventFromMessage(message, level, hint);
    } }, { key: "_setupTransport", value:



    function _setupTransport() {
      if (!this._options.dsn) {

        return new _core.NoopTransport();
      }
      var transportOptions = Object.assign(Object.assign({}, this._options.transportOptions), { dsn: this._options.dsn });
      if (this._options.transport) {
        return new this._options.transport(transportOptions);
      }
      if (_wrapper.NATIVE.isNativeTransportAvailable()) {
        return new _native.NativeTransport();
      }
      return new _react.Transports.FetchTransport(transportOptions);
    } }, { key: "_initNativeSdk", value:



    function _initNativeSdk() {
      var _a, _b, _c, _d;
      return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
        var didCallNativeInit = false;
        try {
          didCallNativeInit = yield _wrapper.NATIVE.initNativeSdk(this._options);
        }
        catch (_) {
          this._showCannotConnectDialog();
          (_b = (_a = this._options).onReady) === null || _b === void 0 ? void 0 : _b.call(_a, { didCallNativeInit: false });
          return;
        }
        (_d = (_c = this._options).onReady) === null || _d === void 0 ? void 0 : _d.call(_c, { didCallNativeInit: didCallNativeInit });
      });
    } }, { key: "_showCannotConnectDialog", value:



    function _showCannotConnectDialog() {
      if (__DEV__ && this._options.enableNativeNagger) {
        _reactNative.Alert.alert('Sentry', 'Warning, could not connect to Sentry native SDK.\nIf you do not want to use the native component please pass `enableNative: false` in the options.\nVisit: https://docs.sentry.io/platforms/react-native/#linking for more details.');
      }
    } }]);return ReactNativeBackend;}(_core.BaseBackend);exports.ReactNativeBackend = ReactNativeBackend;