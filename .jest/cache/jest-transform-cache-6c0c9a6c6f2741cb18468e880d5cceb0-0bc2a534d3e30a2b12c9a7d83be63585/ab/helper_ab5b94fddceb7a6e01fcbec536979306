8f9bde51ee3fbac523dcb4d60120542e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upStepOffline = exports.upStepOnline = void 0;
var i18n_1 = __importDefault(require("../i18n"));
var DiceStore_1 = require("./DiceStore");
var _1 = require("./");
var constants_1 = require("../constants");
var helper_1 = require("../screens/helper");
function upFuncOnline(_x) {
  return _upFuncOnline.apply(this, arguments);
}
function _upFuncOnline() {
  _upFuncOnline = (0, _asyncToGenerator2.default)(function* (step) {
    var plan = step.plan,
      history = step.history,
      stepCount = step.stepCount;
    var historyObj = Object.assign({}, history, {
      createDate: Date.now()
    });
    try {
      yield (0, helper_1.createHistory)(historyObj);
      yield (0, helper_1.updatePlan)(plan);
      _1.OnlinePlayer.store.history.unshift(historyObj);
      _1.OnlinePlayer.store.plan = plan;
      if (stepCount !== 6 || plan === 68) {
        (0, constants_1.navigate)('PLANS_DETAIL_SCREEN', {
          plan: plan,
          report: true
        });
      }
      if (plan === 68) {
        DiceStore_1.actionsDice.setMessage('liberation');
        yield (0, helper_1.onWin)();
        _1.OnlinePlayer.store.start = false;
        _1.OnlinePlayer.store.finish = true;
      }
    } catch (err) {
      (0, constants_1.captureException)(err, 'upFuncOnline');
    }
  });
  return _upFuncOnline.apply(this, arguments);
}
function upStepOnline() {
  if (!_1.OnlinePlayer.store.canGo) {
    return;
  }
  var count = DiceStore_1.DiceStore.count;
  var plan = _1.OnlinePlayer.store.plan + count;
  if (count === 6) {
    DiceStore_1.actionsDice.setMessage("" + i18n_1.default.t('oneMoreThrow'));
  } else {
    DiceStore_1.actionsDice.setMessage(' ');
  }
  var isFinished = _1.OnlinePlayer.store.finish;
  var isStart = _1.OnlinePlayer.store.start;
  function handleStart() {
    _1.OnlinePlayer.store.start = true;
    (0, helper_1.onStart)();
  }
  var step = entities({
    isFinished: isFinished,
    plan: plan,
    isStart: isStart,
    stepCount: count,
    handleStart: handleStart
  });
  if (step) {
    upFuncOnline(step);
  }
}
exports.upStepOnline = upStepOnline;
var upFuncOffline = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (step) {
    var plan = step.plan,
      history = step.history,
      id = step.id;
    var historyObj = Object.assign({}, history, {
      createDate: Date.now()
    });
    if (id !== undefined) {
      _1.OfflinePlayers.store.histories[id].unshift(historyObj);
      _1.OfflinePlayers.store.plans[id] = plan;
      if (plan === 68) {
        DiceStore_1.DiceStore.finishArr = DiceStore_1.DiceStore.finishArr.map(function (x, index) {
          return index === id ? x = false : x;
        });
        DiceStore_1.actionsDice.setMessage('liberation');
        _1.OfflinePlayers.store.start[id] = false;
        _1.OfflinePlayers.store.finish[id] = true;
      }
    }
  });
  return function upFuncOffline(_x2) {
    return _ref.apply(this, arguments);
  };
}();
var upStepOffline = function upStepOffline(id) {
  var count = DiceStore_1.DiceStore.count;
  var plan = _1.OfflinePlayers.store.plans[id] + count;
  if (count === 6) {
    DiceStore_1.actionsDice.setMessage("" + i18n_1.default.t('oneMoreThrow'));
  } else {
    DiceStore_1.actionsDice.setMessage(' ');
    DiceStore_1.actionsDice.changePlayer();
  }
  var isFinished = _1.OfflinePlayers.store.finish[id];
  var isStart = _1.OfflinePlayers.store.start[id];
  function handleStart() {
    _1.OfflinePlayers.store.start[id] = true;
  }
  var step = entities({
    isFinished: isFinished,
    plan: plan,
    isStart: isStart,
    stepCount: count,
    handleStart: handleStart
  });
  if (step) {
    upFuncOffline(Object.assign({}, step, {
      id: id
    }));
  }
};
exports.upStepOffline = upStepOffline;
var entities = function entities(_ref2) {
  var plan = _ref2.plan,
    stepCount = _ref2.stepCount,
    isFinished = _ref2.isFinished,
    isStart = _ref2.isStart,
    handleStart = _ref2.handleStart;
  if (isStart) {
    var lib = {
      count: stepCount,
      plan: 68,
      status: 'liberation'
    };
    switch (true) {
      case plan > 72:
        return undefined;
      case plan === 72:
        var obj51 = {
          count: stepCount,
          plan: 51,
          status: 'snake'
        };
        return {
          plan: 51,
          history: obj51,
          stepCount: stepCount
        };
      case plan === 63:
        var obj2 = {
          count: stepCount,
          plan: 2,
          status: 'snake'
        };
        return {
          plan: 2,
          history: obj2,
          stepCount: stepCount
        };
      case plan === 61:
        var obj13 = {
          count: stepCount,
          plan: 13,
          status: 'snake'
        };
        return {
          plan: 13,
          history: obj13,
          stepCount: stepCount
        };
      case plan === 55:
        var obj3 = {
          count: stepCount,
          plan: 3,
          status: 'snake'
        };
        return {
          plan: 3,
          history: obj3,
          stepCount: stepCount
        };
      case plan === 52:
        var obj35 = {
          count: stepCount,
          plan: 35,
          status: 'snake'
        };
        return {
          plan: 35,
          history: obj35,
          stepCount: stepCount
        };
      case plan === 44:
        var obj9 = {
          count: stepCount,
          plan: 9,
          status: 'snake'
        };
        return {
          plan: 9,
          history: obj9,
          stepCount: stepCount
        };
      case plan === 29:
        var obj6 = {
          count: stepCount,
          plan: 6,
          status: 'snake'
        };
        return {
          plan: 6,
          history: obj6,
          stepCount: stepCount
        };
      case plan === 24:
        var obj7 = {
          count: stepCount,
          plan: 7,
          status: 'snake'
        };
        return {
          plan: 7,
          history: obj7,
          stepCount: stepCount
        };
      case plan === 16:
        var obj4 = {
          count: stepCount,
          plan: 4,
          status: 'snake'
        };
        return {
          plan: 4,
          history: obj4,
          stepCount: stepCount
        };
      case plan === 12:
        var obj8 = {
          count: stepCount,
          plan: 8,
          status: 'snake'
        };
        return {
          plan: 8,
          history: obj8,
          stepCount: stepCount
        };
      case plan === 10:
        var obj23 = {
          count: stepCount,
          plan: 23,
          status: 'arrow'
        };
        return {
          plan: 23,
          history: obj23,
          stepCount: stepCount
        };
      case plan === 17:
        var obj69 = {
          count: stepCount,
          plan: 69,
          status: 'arrow'
        };
        return {
          plan: 69,
          history: obj69,
          stepCount: stepCount
        };
      case plan === 20:
        var obj32 = {
          count: stepCount,
          plan: 32,
          status: 'arrow'
        };
        return {
          plan: 32,
          history: obj32,
          stepCount: stepCount
        };
      case plan === 22:
        var obj60 = {
          count: stepCount,
          plan: 60,
          status: 'arrow'
        };
        return {
          plan: 60,
          history: obj60,
          stepCount: stepCount
        };
      case plan === 27:
        var obj41 = {
          count: stepCount,
          plan: 41,
          status: 'arrow'
        };
        return {
          plan: 41,
          history: obj41,
          stepCount: stepCount
        };
      case plan === 28:
        var obj50 = {
          count: stepCount,
          plan: 50,
          status: 'arrow'
        };
        return {
          plan: 50,
          history: obj50,
          stepCount: stepCount
        };
      case plan === 37:
        var obj66 = {
          count: stepCount,
          plan: 66,
          status: 'arrow'
        };
        return {
          plan: 66,
          history: obj66,
          stepCount: stepCount
        };
      case plan === 45:
        var obj67 = {
          count: stepCount,
          plan: 67,
          status: 'arrow'
        };
        return {
          plan: 67,
          history: obj67,
          stepCount: stepCount
        };
      case plan === 46:
        var obj62 = {
          count: stepCount,
          plan: 62,
          status: 'arrow'
        };
        return {
          plan: 62,
          history: obj62,
          stepCount: stepCount
        };
      case plan === 54:
        return {
          plan: 68,
          history: lib,
          stepCount: stepCount
        };
      case plan === 68:
        return {
          plan: 68,
          history: lib,
          stepCount: stepCount
        };
      default:
        {
          var obj = {
            count: stepCount,
            plan: plan,
            status: 'cube'
          };
          return {
            plan: plan,
            history: obj,
            stepCount: stepCount
          };
        }
    }
  } else if (stepCount === 6 && !isFinished) {
    var _obj = {
      count: stepCount,
      plan: 6,
      status: 'cube'
    };
    handleStart();
    return {
      plan: 6,
      history: _obj,
      stepCount: stepCount
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,