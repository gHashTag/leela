53e18816b6ebb459c03469483778ed7e
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return typeof key === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (typeof input !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (typeof res !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}var


















PressabilityPerformanceEventEmitter = function () {


  function PressabilityPerformanceEventEmitter() {_classCallCheck(this, PressabilityPerformanceEventEmitter);this._listeners = [];}_createClass(PressabilityPerformanceEventEmitter, [{ key: "addListener", value:

    function addListener(listener) {
      this._listeners.push(listener);
    } }, { key: "removeListener", value:

    function removeListener(listener) {
      var index = this._listeners.indexOf(listener);
      if (index > -1) {
        this._listeners.splice(index, 1);
      }
    } }, { key: "emitEvent", value:

    function emitEvent(constructEvent) {
      if (this._listeners.length === 0) {
        return;
      }

      var event = constructEvent();
      this._listeners.forEach(function (listener) {return listener(event);});
    } }]);return PressabilityPerformanceEventEmitter;}();


var PressabilityPerformanceEventEmitterSingleton =
new PressabilityPerformanceEventEmitter();var _default =

PressabilityPerformanceEventEmitterSingleton;exports.default = _default;