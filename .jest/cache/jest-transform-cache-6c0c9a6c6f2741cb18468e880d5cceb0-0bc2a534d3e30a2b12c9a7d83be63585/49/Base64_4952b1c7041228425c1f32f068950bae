b607d3ac328b35691a93e1a06cdbde1b
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;

















var _binaryToBase = _interopRequireDefault(require("react-native/Libraries/Utilities/binaryToBase64"));
var _promise = require("./promise");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';




function btoa(input) {
  var map;
  var i = 0;
  var block = 0;
  var output = '';

  for (
  block = 0, i = 0, map = CHARS;
  input.charAt(i | 0) || (map = '=', i % 1);
  output += map.charAt(63 & block >> 8 - i % 1 * 8))
  {
    var charCode = input.charCodeAt(i += 3 / 4);

    if (charCode > 0xff) {
      throw new Error(
        "'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range."
      );
    }

    block = block << 8 | charCode;
  }

  return output;
}




function atob(input) {
  var i = 0;
  var bc = 0;
  var bs = 0;
  var buffer;
  var output = '';

  var str = input.replace(/[=]+$/, '');

  if (str.length % 4 === 1) {
    throw new Error(
      "'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded."
    );
  }

  for (
  bc = 0, bs = 0, i = 0;
  buffer = str.charAt(i++);
  ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ?
  output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) :
  0)
  {
    buffer = CHARS.indexOf(buffer);
  }

  return output;
}




function fromData(data) {
  if (data instanceof Blob) {
    var fileReader = new FileReader();
    var _promiseDefer = (0, _promise.promiseDefer)(),resolve = _promiseDefer.resolve,reject = _promiseDefer.reject,promise = _promiseDefer.promise;

    fileReader.readAsDataURL(data);

    fileReader.onloadend = function onloadend() {
      resolve({ string: fileReader.result, format: 'data_url' });
    };

    fileReader.onerror = function onerror(event) {
      fileReader.abort();
      reject(event);
    };

    return promise;
  }

  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {
    return Promise.resolve({
      string: (0, _binaryToBase.default)(data),
      format: 'base64'
    });
  }

  throw new Error("'RNFirebase.Base64.fromData' failed: Unknown data type.");
}var _default =

{
  btoa: btoa,
  atob: atob,
  fromData: fromData
};exports.default = _default;