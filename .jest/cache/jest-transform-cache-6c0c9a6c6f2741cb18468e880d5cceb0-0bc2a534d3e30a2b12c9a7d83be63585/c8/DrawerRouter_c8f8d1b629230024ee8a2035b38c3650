0ad1f4835e3e0a5e8feb49fad7379a81
"use strict";var _excluded = ["defaultStatus"];function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawerActions = void 0;
exports.default = DrawerRouter;
var _nonSecure = require("nanoid/non-secure");
var _TabRouter = _interopRequireWildcard(require("./TabRouter"));
function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}
function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}
var DrawerActions = Object.assign({},
_TabRouter.TabActions, {
  openDrawer: function openDrawer() {
    return {
      type: 'OPEN_DRAWER'
    };
  },
  closeDrawer: function closeDrawer() {
    return {
      type: 'CLOSE_DRAWER'
    };
  },
  toggleDrawer: function toggleDrawer() {
    return {
      type: 'TOGGLE_DRAWER'
    };
  } });

exports.DrawerActions = DrawerActions;
function DrawerRouter(_ref) {
  var _ref$defaultStatus =


    _ref.defaultStatus,defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,rest = _objectWithoutProperties(_ref, _excluded);
  var router = (0, _TabRouter.default)(rest);
  var isDrawerInHistory = function isDrawerInHistory(state) {
    var _state$history;
    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {return it.type === 'drawer';}));
  };
  var addDrawerToHistory = function addDrawerToHistory(state) {
    if (isDrawerInHistory(state)) {
      return state;
    }
    return Object.assign({},
    state, {
      history: [].concat(_toConsumableArray(state.history), [{
        type: 'drawer',
        status: defaultStatus === 'open' ? 'closed' : 'open'
      }]) });

  };
  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {
    if (!isDrawerInHistory(state)) {
      return state;
    }
    return Object.assign({},
    state, {
      history: state.history.filter(function (it) {return it.type !== 'drawer';}) });

  };
  var openDrawer = function openDrawer(state) {
    if (defaultStatus === 'open') {
      return removeDrawerFromHistory(state);
    }
    return addDrawerToHistory(state);
  };
  var closeDrawer = function closeDrawer(state) {
    if (defaultStatus === 'open') {
      return addDrawerToHistory(state);
    }
    return removeDrawerFromHistory(state);
  };
  return Object.assign({},
  router, {
    type: 'drawer',
    getInitialState: function getInitialState(_ref2) {
      var
        routeNames =


        _ref2.routeNames,routeParamList = _ref2.routeParamList,routeGetIdList = _ref2.routeGetIdList;
      var state = router.getInitialState({
        routeNames: routeNames,
        routeParamList: routeParamList,
        routeGetIdList: routeGetIdList
      });
      return Object.assign({},
      state, {
        default: defaultStatus,
        stale: false,
        type: 'drawer',
        key: "drawer-" + (0, _nonSecure.nanoid)() });

    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var
        routeNames =


        _ref3.routeNames,routeParamList = _ref3.routeParamList,routeGetIdList = _ref3.routeGetIdList;
      if (partialState.stale === false) {
        return partialState;
      }
      var state = router.getRehydratedState(partialState, {
        routeNames: routeNames,
        routeParamList: routeParamList,
        routeGetIdList: routeGetIdList
      });
      if (isDrawerInHistory(partialState)) {

        state = removeDrawerFromHistory(state);
        state = addDrawerToHistory(state);
      }
      return Object.assign({},
      state, {
        default: defaultStatus,
        type: 'drawer',
        key: "drawer-" + (0, _nonSecure.nanoid)() });

    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var result = router.getStateForRouteFocus(state, key);
      return closeDrawer(result);
    },
    getStateForAction: function getStateForAction(state, action, options) {
      switch (action.type) {
        case 'OPEN_DRAWER':
          return openDrawer(state);
        case 'CLOSE_DRAWER':
          return closeDrawer(state);
        case 'TOGGLE_DRAWER':
          if (isDrawerInHistory(state)) {
            return removeDrawerFromHistory(state);
          }
          return addDrawerToHistory(state);
        case 'JUMP_TO':
        case 'NAVIGATE':
          {
            var result = router.getStateForAction(state, action, options);
            if (result != null && result.index !== state.index) {
              return closeDrawer(result);
            }
            return result;
          }
        case 'GO_BACK':
          if (isDrawerInHistory(state)) {
            return removeDrawerFromHistory(state);
          }
          return router.getStateForAction(state, action, options);
        default:
          return router.getStateForAction(state, action, options);
      }
    },
    actionCreators: DrawerActions });

}