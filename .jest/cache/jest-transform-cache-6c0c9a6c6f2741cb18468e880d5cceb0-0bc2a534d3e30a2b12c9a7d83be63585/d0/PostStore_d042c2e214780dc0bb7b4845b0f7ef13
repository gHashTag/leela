9a26dbbfc5c7e0ce1cf036a5d0919527
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PostStore = void 0;
var _env_1 = require("@env");
var auth_1 = __importDefault(require("@react-native-firebase/auth"));
var firestore_1 = __importDefault(require("@react-native-firebase/firestore"));
var mobx_1 = require("mobx");
var non_secure_1 = require("nanoid/non-secure");
var constants_1 = require("../constants");
var i18n_1 = __importDefault(require("../i18n"));
var i18n_2 = require("../i18n");
var helper_1 = require("../screens/helper");
var OnlinePlayer_1 = require("../store/OnlinePlayer");
var OtherPlayers_1 = require("../store/OtherPlayers");
var limit = 6;
exports.PostStore = {
  store: (0, mobx_1.makeAutoObservable)({
    posts: [],
    ownPosts: [],
    comments: [],
    replyComments: [],
    loadOwnPosts: true,
    loadPosts: true,
    myCountPosts: 0
  }),
  countPosts: function () {
    var _countPosts = (0, _asyncToGenerator2.default)(function* () {
      try {
        var _currentUser;
        var userUid = (_currentUser = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser.uid;
        (0, firestore_1.default)().collection('Posts').where('ownerId', '==', userUid).orderBy('createTime', 'desc').limit(limit).onSnapshot(function (querySnapshot) {
          exports.PostStore.fetchOwnPosts(querySnapshot);
          exports.PostStore.store.myCountPosts = querySnapshot.size;
        });
        return exports.PostStore.store.myCountPosts;
      } catch (error) {
        (0, constants_1.captureException)(error, 'getNumberOfPosts');
      }
    });
    function countPosts() {
      return _countPosts.apply(this, arguments);
    }
    return countPosts;
  }(),
  createPost: function () {
    var _createPost = (0, _asyncToGenerator2.default)(function* (_ref) {
      var _currentUser2, _currentUser3;
      var text = _ref.text,
        plan = _ref.plan,
        systemMessage = _ref.systemMessage,
        planText = _ref.planText;
      var userUid = (_currentUser2 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser2.uid;
      var email = (_currentUser3 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser3.email;
      if (userUid && email) {
        var id = (0, non_secure_1.nanoid)();
        var post = {
          systemMessage: systemMessage,
          text: text,
          plan: plan,
          id: id,
          createTime: Date.now(),
          email: email,
          comments: [],
          liked: [],
          accept: true,
          language: i18n_2.lang,
          flagEmoji: i18n_2.flagEmoji,
          planText: planText,
          ownerId: userUid
        };
        try {
          yield (0, firestore_1.default)().collection('Posts').doc(id).set(post);
          var docSnapshot = yield (0, firestore_1.default)().collection('Posts').doc(id).get();
          if (docSnapshot.exists) {
            var createdPostData = docSnapshot.data();
            var textMessage = createdPostData === undefined ? null : createdPostData.text;
            yield (0, constants_1.generateComment)({
              message: textMessage,
              systemMessage: systemMessage,
              planText: planText
            });
            return createdPostData;
          } else {
            return null;
          }
        } catch (error) {
          (0, constants_1.captureException)(error, 'createPost');
          throw error;
        }
      }
      throw new Error('Missing userUid or email');
    });
    function createPost(_x) {
      return _createPost.apply(this, arguments);
    }
    return createPost;
  }(),
  createComment: function () {
    var _createComment = (0, _asyncToGenerator2.default)(function* (_ref2) {
      var text = _ref2.text,
        postId = _ref2.postId,
        postOwner = _ref2.postOwner,
        ownerId = _ref2.ownerId;
      try {
        var _currentUser4, _currentUser5;
        var userUid = ownerId !== _env_1.LEELA_ID ? (_currentUser4 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser4.uid : ownerId;
        var email = (_currentUser5 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser5.email;
        var path = (0, non_secure_1.nanoid)(22);
        if (userUid && email) {
          var comment = {
            text: text,
            postId: postId,
            postOwner: postOwner,
            firstName: OnlinePlayer_1.OnlinePlayer.store.profile.firstName,
            lastName: OnlinePlayer_1.OnlinePlayer.store.profile.lastName,
            ownerId: userUid,
            createTime: Date.now(),
            email: email,
            reply: false,
            id: path
          };
          yield (0, firestore_1.default)().collection('Posts').doc(postId).update({
            comments: firestore_1.default.FieldValue.arrayUnion(path)
          });
          yield (0, firestore_1.default)().collection('Comments').doc(path).set(comment);
        }
      } catch (error) {
        (0, constants_1.captureException)(error, 'createComment');
        throw error;
      }
    });
    function createComment(_x2) {
      return _createComment.apply(this, arguments);
    }
    return createComment;
  }(),
  removeCommentIdInPost: function () {
    var _removeCommentIdInPost = (0, _asyncToGenerator2.default)(function* (_ref3) {
      var commentId = _ref3.commentId,
        postId = _ref3.postId;
      postId && (0, firestore_1.default)().collection('Posts').doc(postId).update({
        comments: firestore_1.default.FieldValue.arrayRemove(commentId)
      });
    });
    function removeCommentIdInPost(_x3) {
      return _removeCommentIdInPost.apply(this, arguments);
    }
    return removeCommentIdInPost;
  }(),
  delComment: function () {
    var _delComment = (0, _asyncToGenerator2.default)(function* (_ref4) {
      var commentId = _ref4.commentId,
        isReply = _ref4.isReply,
        postId = _ref4.postId;
      yield (0, firestore_1.default)().collection('Comments').doc(commentId).delete();
      exports.PostStore.store.comments = exports.PostStore.store.comments.filter(function (a) {
        return a.id !== commentId;
      });
      exports.PostStore.removeCommentIdInPost({
        commentId: commentId,
        postId: postId
      });
      if (!isReply) {
        (0, firestore_1.default)().collection('Comments').where('commentId', '==', commentId).get().then(function (querySnap) {
          querySnap.forEach(function (doc) {
            var data = doc.data();
            exports.PostStore.removeCommentIdInPost({
              commentId: data.id,
              postId: postId
            });
            doc.ref.delete();
          });
        });
      }
    });
    function delComment(_x4) {
      return _delComment.apply(this, arguments);
    }
    return delComment;
  }(),
  replyComment: function () {
    var _replyComment = (0, _asyncToGenerator2.default)(function* (_ref5) {
      var _currentUser6;
      var text = _ref5.text,
        commentId = _ref5.commentId,
        postId = _ref5.postId,
        commentOwner = _ref5.commentOwner;
      var userUid = (_currentUser6 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser6.uid;
      var prof = yield (0, helper_1.getProfile)();
      if (prof) {
        var path = (0, non_secure_1.nanoid)(23);
        if (userUid) {
          var comment = {
            text: text,
            postId: postId,
            commentId: commentId,
            commentOwner: commentOwner,
            firstName: prof.firstName,
            lastName: prof.lastName,
            ownerId: userUid,
            createTime: Date.now(),
            email: prof.email,
            reply: true,
            id: path
          };
          yield (0, firestore_1.default)().collection('Posts').doc(postId).update({
            comments: firestore_1.default.FieldValue.arrayUnion(path)
          });
          yield (0, firestore_1.default)().collection('Comments').doc(path).set(comment);
        }
      }
    });
    function replyComment(_x5) {
      return _replyComment.apply(this, arguments);
    }
    return replyComment;
  }(),
  fetchPosts: function () {
    var _fetchPosts = (0, _asyncToGenerator2.default)(function* (querySnap) {
      exports.PostStore.store.loadPosts = true;
      var uid = (0, helper_1.getUid)();
      var isAdmin = OnlinePlayer_1.OnlinePlayer.store.status === 'Admin';
      var res = querySnap.docs.map(function (a) {
        if (a.exists) {
          var data = a.data();
          return data;
        }
      }).filter(function (a) {
        return a !== undefined;
      }).filter(function (a) {
        return isAdmin ? true : (a == null ? void 0 : a.ownerId) === uid ? true : a == null ? void 0 : a.accept;
      });
      if (res.length > 0) {
        exports.PostStore.store.posts = res.sort(function (a, b) {
          return b.createTime - a.createTime;
        });
      }
      exports.PostStore.store.loadPosts = false;
    });
    function fetchPosts(_x6) {
      return _fetchPosts.apply(this, arguments);
    }
    return fetchPosts;
  }(),
  fetchOwnPosts: function () {
    var _fetchOwnPosts = (0, _asyncToGenerator2.default)(function* (querySnap) {
      exports.PostStore.store.loadOwnPosts = true;
      var uid = (0, helper_1.getUid)();
      var res = querySnap.docs.map(function (a) {
        if (a.exists) {
          var data = a.data();
          return data;
        }
      }).filter(function (a) {
        return a !== undefined;
      }).filter(function (a) {
        return (a == null ? void 0 : a.ownerId) === uid;
      });
      if (res.length > 0) {
        exports.PostStore.store.ownPosts = res.sort(function (a, b) {
          return b.createTime - a.createTime;
        });
      }
      exports.PostStore.store.loadOwnPosts = false;
    });
    function fetchOwnPosts(_x7) {
      return _fetchOwnPosts.apply(this, arguments);
    }
    return fetchOwnPosts;
  }(),
  fetchComments: function () {
    var _fetchComments = (0, _asyncToGenerator2.default)(function* (querySnap) {
      var res = yield Promise.all(querySnap.docs.map(function () {
        var _ref6 = (0, _asyncToGenerator2.default)(function* (a) {
          if (a.exists) {
            var data = a.data();
            return data;
          }
        });
        return function (_x9) {
          return _ref6.apply(this, arguments);
        };
      }()).filter(function (a) {
        return a !== undefined;
      }));
      if (res.length > 0) {
        exports.PostStore.store.comments = res.filter(function (a) {
          return a.reply ? false : true;
        }).sort(function (a, b) {
          return b.createTime - a.createTime;
        });
        exports.PostStore.store.replyComments = res.filter(function (a) {
          return a.reply ? true : false;
        }).sort(function (a, b) {
          return a.createTime - b.createTime;
        });
      }
    });
    function fetchComments(_x8) {
      return _fetchComments.apply(this, arguments);
    }
    return fetchComments;
  }(),
  likePost: function () {
    var _likePost = (0, _asyncToGenerator2.default)(function* (postId) {
      var _currentUser7;
      var userUid = (_currentUser7 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser7.uid;
      yield (0, firestore_1.default)().collection('Posts').doc(postId).update({
        liked: firestore_1.default.FieldValue.arrayUnion(userUid)
      });
    });
    function likePost(_x10) {
      return _likePost.apply(this, arguments);
    }
    return likePost;
  }(),
  unlikePost: function () {
    var _unlikePost = (0, _asyncToGenerator2.default)(function* (postId) {
      var _currentUser8;
      var userUid = (_currentUser8 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser8.uid;
      yield (0, firestore_1.default)().collection('Posts').doc(postId).update({
        liked: firestore_1.default.FieldValue.arrayRemove(userUid)
      });
    });
    function unlikePost(_x11) {
      return _unlikePost.apply(this, arguments);
    }
    return unlikePost;
  }(),
  getOwnerName: function getOwnerName(ownerId, full) {
    var _currentUser9, _currentUser10;
    var userUid = (_currentUser9 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser9.uid;
    var displayName = (_currentUser10 = (0, auth_1.default)().currentUser) == null ? void 0 : _currentUser10.displayName;
    if (userUid === ownerId) {
      return displayName;
    }
    var profile = OtherPlayers_1.OtherPlayers.store.players.find(function (a) {
      return a.owner === ownerId;
    });
    if (!profile) {
      return i18n_1.default.t('anonymous');
    }
    return full !== false ? profile.firstName + " " + profile.lastName : "" + profile.firstName;
  },
  getComPlan: function getComPlan(ownerId) {
    var _OtherPlayers_1$Other;
    var userUid = (0, helper_1.getUid)();
    if (userUid === ownerId) {
      return OnlinePlayer_1.OnlinePlayer.store.plan;
    }
    var plan = (_OtherPlayers_1$Other = OtherPlayers_1.OtherPlayers.store.players.find(function (a) {
      return a.owner === ownerId;
    })) == null ? void 0 : _OtherPlayers_1$Other.plan;
    if (!plan) {
      return 0;
    }
    return plan;
  },
  getOncePost: function () {
    var _getOncePost = (0, _asyncToGenerator2.default)(function* () {
      yield (0, firestore_1.default)().collection('Profiles').get().then(function (snap) {
        return OtherPlayers_1.OtherPlayers.getOtherProf({
          snapshot: snap
        });
      });
      yield (0, firestore_1.default)().collection('Posts').get().then(exports.PostStore.fetchPosts);
    });
    function getOncePost() {
      return _getOncePost.apply(this, arguments);
    }
    return getOncePost;
  }(),
  translateText: function () {
    var _translateText = (0, _asyncToGenerator2.default)(function* (text) {
      try {
        var _res$translations;
        var res = yield (yield fetch('https://translate.api.cloud.yandex.net/translate/v2/translate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: "Api-Key " + _env_1.YANDEX_TRANSLATE_API_KEY
          },
          body: JSON.stringify({
            folderId: _env_1.YANDEX_FOLDER_ID,
            texts: text,
            targetLanguageCode: i18n_2.lang
          })
        })).json();
        if (res != null && res.translations && ((_res$translations = res.translations) == null ? void 0 : _res$translations.length) > 0) {
          return res.translations[0].text;
        }
      } catch (err) {
        (0, constants_1.captureException)(err, 'translateText');
      }
      return text;
    });
    function translateText(_x12) {
      return _translateText.apply(this, arguments);
    }
    return translateText;
  }(),
  getAvaById: function getAvaById(uid) {
    var _OtherPlayers_1$Other2;
    var userUid = (0, helper_1.getUid)();
    if (userUid === uid) {
      return OnlinePlayer_1.OnlinePlayer.store.avatar;
    }
    var otherUserAva = (_OtherPlayers_1$Other2 = OtherPlayers_1.OtherPlayers.store.players.find(function (a) {
      return a.owner === uid;
    })) == null ? void 0 : _OtherPlayers_1$Other2.avatar;
    return otherUserAva ? otherUserAva : 'https://bafkreiftrmfmimlvo26xaxfvt2ypnjjaavq5mgnkjljs6mczfekii4cmtq.ipfs.nftstorage.link/';
  },
  banUnbanUser: function () {
    var _banUnbanUser = (0, _asyncToGenerator2.default)(function* (uid) {
      try {
        var profile = (yield (0, firestore_1.default)().collection('Profiles').doc(uid).get()).data();
        if (profile && profile.status !== 'Admin') {
          if (profile.status === 'ban') {
            (0, firestore_1.default)().collection('Profiles').doc(uid).update({
              status: null
            });
          } else {
            (0, firestore_1.default)().collection('Profiles').doc(uid).update({
              status: 'ban'
            });
          }
        }
      } catch (error) {
        (0, constants_1.captureException)(error, 'banUnbanUser');
      }
    });
    function banUnbanUser(_x13) {
      return _banUnbanUser.apply(this, arguments);
    }
    return banUnbanUser;
  }(),
  delPost: function delPost(id) {
    (0, firestore_1.default)().collection('Comments').where('postId', '==', id).get().then(function (querySnap) {
      querySnap.forEach(function () {
        var _ref7 = (0, _asyncToGenerator2.default)(function* (doc) {
          var data = doc.data();
          var comId = data.id;
          exports.PostStore.delComment({
            commentId: comId,
            isReply: true
          });
        });
        return function (_x14) {
          return _ref7.apply(this, arguments);
        };
      }());
    });
    (0, firestore_1.default)().collection('Posts').doc(id).delete();
  },
  delAllUserPosts: function () {
    var _delAllUserPosts = (0, _asyncToGenerator2.default)(function* (userUid) {
      (0, firestore_1.default)().collection('Posts').where('ownerId', '==', userUid).get().then(function (querySnap) {
        querySnap.forEach(function () {
          var _ref8 = (0, _asyncToGenerator2.default)(function* (doc) {
            var postId = doc.data().id;
            exports.PostStore.delPost(postId);
          });
          return function (_x16) {
            return _ref8.apply(this, arguments);
          };
        }());
      });
    });
    function delAllUserPosts(_x15) {
      return _delAllUserPosts.apply(this, arguments);
    }
    return delAllUserPosts;
  }(),
  delAllUserComments: function () {
    var _delAllUserComments = (0, _asyncToGenerator2.default)(function* (userUid) {
      (0, firestore_1.default)().collection('Comments').where('ownerId', '==', userUid).get().then(function (querySnap) {
        querySnap.forEach(function () {
          var _ref9 = (0, _asyncToGenerator2.default)(function* (doc) {
            var data = doc.data();
            var commentId = data.id;
            var isReply = data.reply;
            var postId = data.postId;
            exports.PostStore.delComment({
              commentId: commentId,
              isReply: isReply,
              postId: postId
            });
          });
          return function (_x18) {
            return _ref9.apply(this, arguments);
          };
        }());
      });
    });
    function delAllUserComments(_x17) {
      return _delAllUserComments.apply(this, arguments);
    }
    return delAllUserComments;
  }(),
  acceptPost: function acceptPost(isAccept, postId) {
    (0, firestore_1.default)().collection('Posts').doc(postId).update({
      accept: !isAccept
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,